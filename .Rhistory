gross_col <- paste0(year, "_Gross")
if (gross_col %in% names(Merged_Results_Gross_Reported_Claims) && uniq_col %in% names(Merged_Results_Gross_Reported_Claims)) {
Severity_Results[[paste0("Sev_", year)]] <- Merged_Results_Gross_Reported_Claims[[gross_col]] / Merged_Results_Gross_Reported_Claims[[uniq_col]]
} else {
Severity_Results[[paste0("Sev_", year)]] <- NA
}
}
# Merge Frequency_Results and Severity_Results to calculate Risk_Premium
Merged_Risk_Premium <- merge(Frequency_Results, Severity_Results, by = "Statutory_Class")
# Calculate Risk_Premium by multiplying corresponding columns
Risk_Premium <- Merged_Risk_Premium %>% select(Statutory_Class)
for (year in Unique_Results_Years) {
freq_col <- paste0("Freq_", year)
sev_col <- paste0("Sev_", year)
if (freq_col %in% names(Merged_Risk_Premium) && sev_col %in% names(Merged_Risk_Premium)) {
Risk_Premium[[paste0("Risk_Premium_", year)]] <- Merged_Risk_Premium[[freq_col]] * Merged_Risk_Premium[[sev_col]]/100
} else {
Risk_Premium[[paste0("Risk_Premium_", year)]] <- NA
}
}
# Calculate Office_Premium by dividing Risk_Premium by Loss_Ratio of 60%
Loss_Ratio <- 0.60
Office_Premium <- Risk_Premium %>% select(Statutory_Class)
for (year in years) {
risk_premium_col <- paste0("Risk_Premium_", year)
if (risk_premium_col %in% names(Risk_Premium)) {
Office_Premium[[paste0("Office_Premium_", year)]] <- Risk_Premium[[risk_premium_col]] / Loss_Ratio
} else {
Office_Premium[[paste0("Office_Premium_", year)]] <- NA
}
}
# Transforming data from wide to long format
data_long <- Merged_Risk_Premium %>%
pivot_longer(
cols = matches("Freq_|Sev_"),
names_to = c(".value", "year"),
names_pattern = "(Freq_|Sev_)(\\d+)"
)
# Generate the plot with facets for each year using ggplot2
p <- ggplot(data_long, aes(x = Sev_, y = Freq_, color = Statutory_Class)) +
geom_point(size = 2.5, alpha = 0.8) +
geom_text_repel(aes(label = Statutory_Class), size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")) +
scale_color_viridis_d(begin = 0.2, end = 0.8, option = "D") +
facet_wrap(~year, scales = "free_y") +
labs(
title = "Interactive Scatter Plot of Severity vs Frequency by Year",
x = "Severity",
y = "Frequency"
) +
theme_minimal() +
theme(legend.position = "right",
plot.margin = unit(c(1, 1, 1, 1), "cm"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10))
# Convert to interactive plotly object
plotly_p <- ggplotly(p, tooltip = "text")
# Print the interactive plot
print(plotly_p)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app7.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app7.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app9.R')
runApp('freq_severity_model_app.R')
runApp('freq_severity_model_app.R')
library(dplyr)
library(lubridate)
library(readr)
library(readxl)
library(ggplot2)
library(tidyverse)
#Loading the Premiums Data
premium_data  <- read_csv("C:/Users/Robin Ochieng/Kenbright/Automation and Risk Margin - General/Templates/Code/Exposure/Premium_Data.csv",
col_types = cols(`Period_From` = col_date(format = "%m/%d/%Y"),
`Period_Upto` = col_date(format = "%m/%d/%Y")))
#Loading the Claims Data
claims_data<- read_excel("C:/Users/Robin Ochieng/Kenbright/Automation and Risk Margin - General/Templates/Code/Exposure/Claims_Data.xlsx",
col_types = c("text", "text", "date",
"date", "text", "numeric", "text"))
# Define the range of years
years <- 2017:2023
# Initialize the beginning and end dates for each year
beg_dates <- lapply(years, function(x) mdy(paste("1/1/", x, sep = "")))
names(beg_dates) <- paste("Beg_", years, sep = "")
end_dates <- lapply(years, function(x) mdy(paste("12/31/", x, sep = "")))
names(end_dates) <- paste("End_", years, sep = "")
#Creating the Policy_ID column using the `Period From` and `Period Upto` and the Unique column using the Policy ID
premium_data <- premium_data %>%
mutate(
Policy_ID = paste(PolicyNo, `Period_From`, `Period_Upto`)) %>%
group_by(Policy_ID) %>%
mutate(
Unique = ifelse(row_number() == 1, 1, 0)) %>%
ungroup()
# Processing premium_data to add exposure for each year
for (year in years) {
premium_data <- premium_data %>%
mutate(!!paste("Exposure", year, sep = "_") :=
(pmax(0, (pmin(end_dates[[paste("End_", year, sep = "")]], `Period_Upto`) -
pmax(beg_dates[[paste("Beg_", year, sep = "")]], `Period_From`) + 1))) / 365.25)
}
#Exposure Resuts Table
Exposure_Results <- premium_data %>%
filter(Unique == 1) %>%
group_by(Statutory_Class) %>%
summarise(across(starts_with("Exposure_"), ~ sum(., na.rm = TRUE)))
#Using the Claims Data
#Creating Unique claim ID, Loss Year and the unique column
claims_data <- claims_data %>%
mutate(
Claim_ID = paste(ClaimNo, Loss_Date),
Loss_year = year(Loss_Date)) %>%
group_by(Claim_ID) %>%
mutate(Unique = ifelse(row_number() == 1, 1, 0)) %>%
ungroup()
#Creating the Claims Data Tables
#1). Gross Reported Claims
Gross_Reported_Claims <- claims_data %>%
filter(Loss_year>=2017)%>%
group_by(Statutory_Class, Loss_year) %>%
summarise(Gross_Reported_Sum = sum(Gross_Reported, na.rm = TRUE)) %>%
pivot_wider(
names_from = Loss_year,
values_from = Gross_Reported_Sum,
values_fill = list(Gross_Reported_Sum = 0)) %>%
select(Statutory_Class, sort(setdiff(names(.),    "Statutory_Class")))
#2). Unique Tables
Unique_Results <- claims_data %>%
filter(Loss_year>=2017)%>%
group_by(Statutory_Class, Loss_year) %>%
summarise(Uniq_Sum = sum(Unique, na.rm = TRUE)) %>%
pivot_wider(
names_from = Loss_year,
values_from = Uniq_Sum,
values_fill = list(Uniq_Sum = 0)) %>%
select(Statutory_Class, sort(setdiff(names(.),    "Statutory_Class")))
# Merge the Exposure_results and the Unique_Results data frames by 'Statutory_Class'
Merged_Results_Exposure <- merge(Unique_Results, Exposure_Results, by = "Statutory_Class", all.x = TRUE)
#Extract the years used in the Unique_Results
Unique_Results_Years <- setdiff(names(Unique_Results), "Statutory_Class")
# Initialize an empty data frame to store the division results
Frequency_Results <- Merged_Results_Exposure %>% select(Statutory_Class)
#Frequencies Results in Percentage
# Loop through each year column to perform the division
for (year in Unique_Results_Years) {
exposure_col <- paste0("Exposure_", year)
if (exposure_col %in% names(Merged_Results_Exposure)) {
Frequency_Results[[paste0("Freq_", year)]] <- Merged_Results_Exposure[[year]] / Merged_Results_Exposure[[exposure_col]]*100
} else {
Frequency_Results[[paste0("Freq_", year)]] <- NA
}
}
# Merge the  frames by 'Statutory_Class'
Merged_Results_Gross_Reported_Claims <- merge(Unique_Results, Gross_Reported_Claims, by = "Statutory_Class", suffixes = c("_Uniq", "_Gross"))
# Perform the division for each year
Gross_Reported_Claims_Years <- setdiff(names(Unique_Results), "Statutory_Class")
# Initialize an empty data frame to store the division results
Severity_Results <- Merged_Results_Gross_Reported_Claims %>% select(Statutory_Class)
# Loop through each year column to perform the division
for (year in Gross_Reported_Claims_Years) {
uniq_col <- paste0(year, "_Uniq")
gross_col <- paste0(year, "_Gross")
if (gross_col %in% names(Merged_Results_Gross_Reported_Claims) && uniq_col %in% names(Merged_Results_Gross_Reported_Claims)) {
Severity_Results[[paste0("Sev_", year)]] <- Merged_Results_Gross_Reported_Claims[[gross_col]] / Merged_Results_Gross_Reported_Claims[[uniq_col]]
} else {
Severity_Results[[paste0("Sev_", year)]] <- NA
}
}
# Merge Frequency_Results and Severity_Results to calculate Risk_Premium
Merged_Risk_Premium <- merge(Frequency_Results, Severity_Results, by = "Statutory_Class")
# Calculate Risk_Premium by multiplying corresponding columns
Risk_Premium <- Merged_Risk_Premium %>% select(Statutory_Class)
for (year in Unique_Results_Years) {
freq_col <- paste0("Freq_", year)
sev_col <- paste0("Sev_", year)
if (freq_col %in% names(Merged_Risk_Premium) && sev_col %in% names(Merged_Risk_Premium)) {
Risk_Premium[[paste0("Risk_Premium_", year)]] <- Merged_Risk_Premium[[freq_col]] * Merged_Risk_Premium[[sev_col]]/100
} else {
Risk_Premium[[paste0("Risk_Premium_", year)]] <- NA
}
}
# Calculate Office_Premium by dividing Risk_Premium by Loss_Ratio of 60%
Loss_Ratio <- 0.60
Office_Premium <- Risk_Premium %>% select(Statutory_Class)
for (year in years) {
risk_premium_col <- paste0("Risk_Premium_", year)
if (risk_premium_col %in% names(Risk_Premium)) {
Office_Premium[[paste0("Office_Premium_", year)]] <- Risk_Premium[[risk_premium_col]] / Loss_Ratio
} else {
Office_Premium[[paste0("Office_Premium_", year)]] <- NA
}
}
# Transforming data from wide to long format
data_long <- Merged_Risk_Premium %>%
pivot_longer(
cols = matches("Freq_|Sev_"),
names_to = c(".value", "year"),
names_pattern = "(Freq_|Sev_)(\\d+)"
)
# Generate the plot with facets for each year using ggplot2
p <- ggplot(data_long, aes(x = Sev_, y = Freq_, color = Statutory_Class)) +
geom_point(size = 2.5, alpha = 0.8) +
geom_text_repel(aes(label = Statutory_Class), size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")) +
scale_color_viridis_d(begin = 0.2, end = 0.8, option = "D") +
facet_wrap(~year, scales = "free_y") +
labs(
title = "Interactive Scatter Plot of Severity vs Frequency by Year",
x = "Severity",
y = "Frequency"
) +
theme_minimal() +
theme(legend.position = "right",
plot.margin = unit(c(1, 1, 1, 1), "cm"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10))
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Exposure plots automation/app8.R')
library(shiny); runApp('C:/Users/Robin Ochieng/Kenbright/Automation and Risk Margin - General/Templates/Tools/APPS/Frequency and Severity/freq_severity_model_app.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/July/Life Insurers in Africa Shiny Dashboard/app15.R')
# Load necessary libraries
library(plotly)
library(dplyr)
ifrs17 <- read_excel("C:/Users/Robin Ochieng/Desktop/data/data.xlsx",
sheet = "IFRS17")
# Assuming 'ifrs17' is your dataset already loaded into your environment
# Summarize data
implementation_data <- ifrs17 %>%
group_by(Ifrs17_implementation) %>%
summarise(Countries = n()) %>%
mutate(percentage = Countries / sum(Countries) * 100)  # Calculate percentages
# Generate the bar plot
p <- plot_ly(implementation_data, x = ~Ifrs17_implementation, y = ~percentage, type = 'bar',
marker = list(color = 'rgba(0, 123, 255, 0.8)'),  # Primary blue color
text = ~paste0(format(round(percentage, 1), nsmall = 1), '%'),  # Show percentage on bars
textposition = 'auto',
hoverinfo = 'y+text')
# Add customization
p <- p %>% layout(
title = "IFRS17 Implementation Status by African Countries",
xaxis = list(title = "IFRS17 Implementation Status"),
yaxis = list(title = "Percentage (%)"),
showlegend = FALSE,
font = list(family = "Mulish")
)
# Print the plot
p
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Sales Forecasting Model/app7_OnTheFlyModel.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Sales Forecasting Model/Count-model.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Sales Forecasting Model/Count-model.R')
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Sales Forecasting Model/Count-model.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Data Clean Up App/APPS/app1.R')
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/PITCH/Sales Dashboard/APPS/Sales Dashboard.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/PITCH/Sales Dashboard/APPS/Sales Dashboard.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/PITCH/Sales Dashboard/APPS/Sales Dashboard.R')
rsconnect::setAccountInfo(name='robtech', token='79B3C6CB1677279298DE6EEAC9EC9AE6', secret='2m7JGMS+wUQOsyWqHgkIcK11xOKLN90NIXs3e+ng')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/PITCH/Sales Dashboard/APPS/Sales Dashboard.R')
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/KOIL GEP UPR/APP/UPR GEP.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/KOIL GEP UPR/APP/UPR_GEP_Monthly_Model.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/KOIL GEP UPR/APP/UPR_GEP_Monthly_Model.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/KOIL GEP UPR/APP/UPR_GEP_Monthly_Model.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/KOIL GEP UPR/APP/UPR_GEP_Monthly_Model.R')
library(readr)
library(dplyr)
All_Membership_Lives_BLUE <- read_csv("C:/Users/Robin Ochieng/Kenbright/AAR - Documents/AAR - Documents/Retainer Services/AAR Kenya/Appointed Actuary/Reinsurance Certification/2023/Reinsurance Certification/Data/Data Used/Membership Data 2/All Membership Lives Blue 23.csv")
#Creating the Policy_ID column using the `Period From` and `Period Upto` and the Unique column using the Policy ID
All_Membership_Lives_BLUE <- All_Membership_Lives_BLUE %>%
mutate(
`POLICY_VALID_FROM` = as.Date(`POLICY_VALID_FROM`, format = "%m/%d/%Y"),
`POLICY_VALID_UPTO` = as.Date(`POLICY_VALID_UPTO`, format = "%m/%d/%Y"),
Unique_Policy = paste(MEMBER_ID, POLICY_VALID_FROM, POLICY_VALID_UPTO, CLAUSE_CODE_DEP, sep = ""),
Country_Filter = substr(DISPLAY_MEMBERSHIP_NO, 1, 2))
View(All_Membership_Lives_BLUE)
library(readr)
library(dplyr)
library(stringi)
#Creating the Policy_ID column using the `Period From` and `Period Upto` and the Unique column using the Policy ID
All_Membership_Lives_BLUE <- All_Membership_Lives_BLUE %>%
mutate(
DISPLAY_MEMBERSHIP_NO = stri_encode(DISPLAY_MEMBERSHIP_NO, to = "UTF-8"),
`POLICY_VALID_FROM` = as.Date(`POLICY_VALID_FROM`, format = "%m/%d/%Y"),
`POLICY_VALID_UPTO` = as.Date(`POLICY_VALID_UPTO`, format = "%m/%d/%Y"),
Unique_Policy = paste(MEMBER_ID, POLICY_VALID_FROM, POLICY_VALID_UPTO, CLAUSE_CODE_DEP, sep = ""),
Country_Filter = substr(DISPLAY_MEMBERSHIP_NO, 1, 2))
View(All_Membership_Lives_BLUE)
# Define the range of years
years <- 2017:2023
# Initialize the beginning and end dates for each year
beg_dates <- lapply(years, function(x) mdy(paste("1/1/", x, sep = "")))
library(lubridate)
# Define the range of years
years <- 2017:2023
# Initialize the beginning and end dates for each year
beg_dates <- lapply(years, function(x) mdy(paste("1/1/", x, sep = "")))
names(beg_dates) <- paste("Beg_", years, sep = "")
end_dates <- lapply(years, function(x) mdy(paste("12/31/", x, sep = "")))
names(end_dates) <- paste("End_", years, sep = "")
# Processing premium_data to add exposure for each year
for (year in years) {
All_Membership_Lives_BLUE <- All_Membership_Lives_BLUE %>%
mutate(!!paste("Exposure", year, sep = "_") :=
(pmax(0, (pmin(end_dates[[paste("End_", year, sep = "")]], `POLICY_VALID_UPTO`) -
pmax(beg_dates[[paste("Beg_", year, sep = "")]], `POLICY_VALID_FROM`) + 1))) / 365.25)
}
#Exposure Resuts Table
Exposure_Results <- All_Membership_Lives_BLUE %>%
filter(Country_Filter %in% c("K", "KO", "KE", "AK")) %>%
group_by(CLAUSE_CODE_DEP) %>%
summarise(across(starts_with("Exposure_"), ~ sum(., na.rm = TRUE)))
View(Exposure_Results)
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Medical Exposure App - AAR/APP/Exposure Model - AAR.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Medical Exposure App - AAR/APP/Exposure Model - AAR.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2024/August/Medical Exposure App - AAR/APP/Exposure Model - AAR.R')
library(readr)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
View(poland)
names(poland)
table(poland$basisOfRecord)
table(poland$locality)
table(poland$country)
sum(table(poland$locality))
sum(poland$individualCount)
getStatistics <- function(raw_data) {
# Picker input options
scientific_name <- unique(raw_data$scientificName)
vernacular_name <- unique(raw_data$vernacularName)
species_names <- c(scientific_name, vernacular_name)
raw_data <- raw_data %>% mutate(locality = gsub("Poland - ", "", locality))
# Statistics
cities <- table(raw_data$locality)
kingdom <- table(raw_data$kingdom)
family <- table(raw_data$family)
individual_counts <- sum(raw_data$individualCount)
data <- list(
species_names = species_names,
cities = cities,
kingdoms = kingdom,
families = family,
count = individual_counts
)
return(data)
}
getStatistics(poland)
library(readr)
library(dplyr)
library(tidyverse)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
View(poland)
getStatistics <- function(raw_data) {
# Picker input options
scientific_name <- unique(raw_data$scientificName)
vernacular_name <- unique(raw_data$vernacularName)
species_names <- c(scientific_name, vernacular_name)
raw_data <- raw_data %>% mutate(locality = gsub("Poland - ", "", locality))
# Statistics
cities <- table(raw_data$locality)
kingdom <- table(raw_data$kingdom)
family <- table(raw_data$family)
individual_counts <- sum(raw_data$individualCount)
data <- list(
species_names = species_names,
cities = cities,
kingdoms = kingdom,
families = family,
count = individual_counts
)
return(data)
}
getStatistics(poland)
View(getStatistics(poland))
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
library(readr)
library(dplyr)
library(tidyverse)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
View(poland)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
names(data)
names(poland)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
library(shiny); runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
names(poland)
library(readr)
library(dplyr)
library(tidyverse)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
names(poland)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
table(poland$vernacularName)
table(poland$scientificName)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
table(poland$vernacularName)
View(table(poland$vernacularName))
View(table(poland$scientificName))
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app1.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application/app2.R')
setwd("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/Biodiversity-Shiny-Application")
runApp('app2.R')
print(list.files("modules"))
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
install.packages("rnaturalearth")
install.packages("rnaturalearth")
library(shiny); runApp('app2.R')
install.packages("rnaturalearthdata")
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
library(readr)
library(dplyr)
library(tidyverse)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
names(poland)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
install.packages("leaflet.extras")
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
library(readr)
library(dplyr)
library(tidyverse)
poland <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Gig/R Shinny/Biodiversity Cloned/biodiversity-shiny-app/data/poland.csv")
names(poland)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp()
